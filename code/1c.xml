<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>clock GTime;
// Check the size
//const double T_env[1441] = {8.70,8.69,8.69,8.68,8.67,8.67,8.66,8.65,8.65,8.64,8.63,8.63,8.62,8.61,8.61,8.60,8.59,8.57,8.56,8.55,8.53,8.52,8.51,8.49,8.48,8.47,8.45,8.44,8.43,8.41,8.40,8.39,8.39,8.38,8.37,8.37,8.36,8.35,8.35,8.34,8.33,8.33,8.32,8.31,8.31,8.30,8.29,8.29,8.28,8.27,8.27,8.26,8.25,8.25,8.24,8.23,8.23,8.22,8.21,8.21,8.20,8.19,8.19,8.18,8.17,8.17,8.16,8.15,8.15,8.14,8.13,8.13,8.12,8.11,8.11,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.10,8.09,8.09,8.08,8.07,8.07,8.06,8.05,8.05,8.04,8.03,8.03,8.02,8.01,8.01,8.00,7.99,7.99,7.98,7.97,7.97,7.96,7.95,7.95,7.94,7.93,7.93,7.92,7.91,7.91,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.90,7.89,7.89,7.88,7.87,7.87,7.86,7.85,7.85,7.84,7.83,7.83,7.82,7.81,7.81,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.80,7.79,7.79,7.78,7.77,7.77,7.76,7.75,7.75,7.74,7.73,7.73,7.72,7.71,7.71,7.70,7.69,7.69,7.68,7.67,7.67,7.66,7.65,7.65,7.64,7.63,7.63,7.62,7.61,7.61,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.60,7.59,7.59,7.58,7.57,7.57,7.56,7.55,7.55,7.54,7.53,7.53,7.52,7.51,7.51,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.50,7.49,7.49,7.48,7.47,7.47,7.46,7.45,7.45,7.44,7.43,7.43,7.42,7.41,7.41,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.40,7.39,7.39,7.38,7.37,7.37,7.36,7.35,7.35,7.34,7.33,7.33,7.32,7.31,7.31,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.30,7.29,7.29,7.28,7.27,7.27,7.26,7.25,7.25,7.24,7.23,7.23,7.22,7.21,7.21,7.20,7.19,7.19,7.18,7.17,7.17,7.16,7.15,7.15,7.14,7.13,7.13,7.12,7.11,7.11,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.10,7.09,7.09,7.08,7.07,7.07,7.06,7.05,7.05,7.04,7.03,7.03,7.02,7.01,7.01,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.00,7.02,7.04,7.06,7.08,7.10,7.12,7.14,7.16,7.18,7.20,7.22,7.24,7.26,7.28,7.30,7.33,7.35,7.38,7.41,7.43,7.46,7.49,7.51,7.54,7.57,7.59,7.62,7.65,7.67,7.70,7.73,7.75,7.78,7.81,7.83,7.86,7.89,7.91,7.94,7.97,7.99,8.02,8.05,8.07,8.10,8.13,8.17,8.20,8.23,8.27,8.30,8.33,8.37,8.40,8.43,8.47,8.50,8.53,8.57,8.60,8.65,8.69,8.74,8.79,8.83,8.88,8.93,8.97,9.02,9.07,9.11,9.16,9.21,9.25,9.30,9.35,9.39,9.44,9.49,9.53,9.58,9.63,9.67,9.72,9.77,9.81,9.86,9.91,9.95,10.00,10.05,10.09,10.14,10.19,10.23,10.28,10.33,10.37,10.42,10.47,10.51,10.56,10.61,10.65,10.70,10.75,10.79,10.84,10.89,10.93,10.98,11.03,11.07,11.12,11.17,11.21,11.26,11.31,11.35,11.40,11.44,11.48,11.52,11.56,11.60,11.64,11.68,11.72,11.76,11.80,11.84,11.88,11.92,11.96,12.00,12.03,12.07,12.10,12.13,12.17,12.20,12.23,12.27,12.30,12.33,12.37,12.40,12.43,12.47,12.50,12.53,12.57,12.60,12.63,12.67,12.70,12.73,12.77,12.80,12.83,12.87,12.90,12.93,12.97,13.00,13.03,13.07,13.10,13.13,13.17,13.20,13.23,13.27,13.30,13.33,13.37,13.40,13.43,13.47,13.50,13.52,13.54,13.56,13.58,13.60,13.62,13.64,13.66,13.68,13.70,13.72,13.74,13.76,13.78,13.80,13.83,13.85,13.88,13.91,13.93,13.96,13.99,14.01,14.04,14.07,14.09,14.12,14.15,14.17,14.20,14.22,14.24,14.26,14.28,14.30,14.32,14.34,14.36,14.38,14.40,14.42,14.44,14.46,14.48,14.50,14.51,14.53,14.54,14.55,14.57,14.58,14.59,14.61,14.62,14.63,14.65,14.66,14.67,14.69,14.70,14.71,14.71,14.72,14.73,14.73,14.74,14.75,14.75,14.76,14.77,14.77,14.78,14.79,14.79,14.80,14.81,14.81,14.82,14.83,14.83,14.84,14.85,14.85,14.86,14.87,14.87,14.88,14.89,14.89,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.90,14.91,14.91,14.92,14.93,14.93,14.94,14.95,14.95,14.96,14.97,14.97,14.98,14.99,14.99,15.00,15.01,15.03,15.04,15.05,15.07,15.08,15.09,15.11,15.12,15.13,15.15,15.16,15.17,15.19,15.20,15.22,15.24,15.26,15.28,15.30,15.32,15.34,15.36,15.38,15.40,15.42,15.44,15.46,15.48,15.50,15.52,15.54,15.56,15.58,15.60,15.62,15.64,15.66,15.68,15.70,15.72,15.74,15.76,15.78,15.80,15.81,15.83,15.84,15.85,15.87,15.88,15.89,15.91,15.92,15.93,15.95,15.96,15.97,15.99,16.00,16.01,16.03,16.04,16.05,16.07,16.08,16.09,16.11,16.12,16.13,16.15,16.16,16.17,16.19,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.21,16.21,16.22,16.23,16.23,16.24,16.25,16.25,16.26,16.27,16.27,16.28,16.29,16.29,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.30,16.29,16.29,16.28,16.27,16.27,16.26,16.25,16.25,16.24,16.23,16.23,16.22,16.21,16.21,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.20,16.19,16.19,16.18,16.17,16.17,16.16,16.15,16.15,16.14,16.13,16.13,16.12,16.11,16.11,16.10,16.08,16.06,16.04,16.02,16.00,15.98,15.96,15.94,15.92,15.90,15.88,15.86,15.84,15.82,15.80,15.78,15.76,15.74,15.72,15.70,15.68,15.66,15.64,15.62,15.60,15.58,15.56,15.54,15.52,15.50,15.47,15.45,15.42,15.39,15.37,15.34,15.31,15.29,15.26,15.23,15.21,15.18,15.15,15.13,15.10,15.07,15.03,15.00,14.97,14.93,14.90,14.87,14.83,14.80,14.77,14.73,14.70,14.67,14.63,14.60,14.55,14.49,14.44,14.39,14.33,14.28,14.23,14.17,14.12,14.07,14.01,13.96,13.91,13.85,13.80,13.75,13.69,13.64,13.59,13.53,13.48,13.43,13.37,13.32,13.27,13.21,13.16,13.11,13.05,13.00,12.95,12.89,12.84,12.79,12.73,12.68,12.63,12.57,12.52,12.47,12.41,12.36,12.31,12.25,12.20,12.15,12.11,12.06,12.01,11.97,11.92,11.87,11.83,11.78,11.73,11.69,11.64,11.59,11.55,11.50,11.49,11.47,11.46,11.45,11.43,11.42,11.41,11.39,11.38,11.37,11.35,11.34,11.33,11.31,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.30,11.29,11.29,11.28,11.27,11.27,11.26,11.25,11.25,11.24,11.23,11.23,11.22,11.21,11.21,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.20,11.19,11.19,11.18,11.17,11.17,11.16,11.15,11.15,11.14,11.13,11.13,11.12,11.11,11.11,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.10,11.09,11.09,11.08,11.07,11.07,11.06,11.05,11.05,11.04,11.03,11.03,11.02,11.01,11.01,11.00,10.99,10.99,10.98,10.97,10.97,10.96,10.95,10.95,10.94,10.93,10.93,10.92,10.91,10.91,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.90,10.89,10.89,10.88,10.87,10.87,10.86,10.85,10.85,10.84,10.83,10.83,10.82,10.81,10.81,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.80,10.79,10.79,10.78,10.77,10.77,10.76,10.75,10.75,10.74,10.73,10.73,10.72,10.71,10.71,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.70,10.69,10.69,10.68,10.67,10.67,10.66,10.65,10.65,10.64,10.63,10.63,10.62,10.61,10.61,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.60,10.59,10.59,10.58,10.57,10.57,10.56,10.55,10.55,10.54,10.53,10.53,10.52,10.51,10.51,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50,10.50};
//const double I[1441]     = {};
//const double T_in        = 15.0;
// Place global declarations here.
typedef double zonotope_t[4];
const int max_zonotopes = 64-1;
const int max_setListsPa= 64-1;
const int max_listPa    = 15-1;
const int max_paLen     = 3-1;
typedef int[0,max_zonotopes]  id_zonotope_t;
typedef int[0,max_setListsPa] id_list_patterns_t;
typedef int[0,max_listPa]     id_pattern_t;
typedef int[0,max_paLen]      pattern_len_t;   // 8
id_list_patterns_t ind_l_patterns     = 0;
id_pattern_t       p_id               = 0;
double             x[3]               = {0.0 , 0.0, 0.0};
int                availableInPattern = 0;
int                visitedPatterns    = 0;
int                ppos               = 0;
int                mode               = 0;


const int modes[8][4]    = {{ 1,0,0,0 },{ 1,1,0,0 },{ 2,0,0,0 },{ 2,1,0,0 },{ 3,0,0,1 },{ 3,1,0,1 },{ 2,0,0,1 },{ 2,1,0,1}};
typedef int dist_t[2][100];
const int dt  = 1;

clock xc, yc;
int my_valve = 0;
double Tg = 55.0;
//const double horizont = 3*tau; // multiple of tau  p1=2*tau, p2=3*tau, p3=2*tau, p4=tau: Horizont={}

const int nrSteps = 10;
const int step = 30;
const int horizon=step*nrSteps;
double pareto = 0.0;

/*
R = [ [0.1,0.3], [40,70]] 
S = [ [0.09,0.31], [30,80]] 
*/
// factors
const double factorTe =  2.50; 
//HOLDER_factorTe
const double factorI  =  0.80; 
//HOLDER_factorI
const double factorKe =  1.00; 
//HOLDER_factorKe
const double rateVo   =  0.01; 
//HOLDER_rateVo
const double TwaterIn = 22.50; 
//HOLDER_TwaterIn
const double tau      = 300.00; 
//HOLDER_tau

// Forecasting 
const double T_env[50]= {8.066666666666666,8.06,8.053333333333333,8.046666666666667,8.04,8.033333333333333,8.026666666666667,8.02,8.013333333333334,8.006666666666666,8.0,7.993333333333333,7.986666666666666,7.98,7.973333333333334,7.966666666666667,7.96,7.953333333333333,7.946666666666667,7.94,7.933333333333334,7.926666666666667,7.92,7.913333333333334,7.906666666666667,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.9,7.8933333333333335,7.886666666666667,7.88,7.873333333333334,7.866666666666667,7.86,7.8533333333333335,7.846666666666667,7.84}; 
//HOLDER_T_env[H+1]
const double T_in[50] = {22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5,22.5}; 
//HOLDER_T_in[H+1]
const double I[50]    = {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
//HOLDER_I[H+1]
const double t[50]    = {5700.0,5760.0,5820.0,5880.0,5940.0,6000.0,6060.0,6120.0,6180.0,6240.0,6300.0,6360.0,6420.0,6480.0,6540.0,6600.0,6660.0,6720.0,6780.0,6840.0,6900.0,6960.0,7020.0,7080.0,7140.0,7200.0,7260.0,7320.0,7380.0,7440.0,7500.0,7560.0,7620.0,7680.0,7740.0,7800.0,7860.0,7920.0,7980.0,8040.0,8100.0,8160.0,8220.0,8280.0,8340.0,8400.0,8460.0,8520.0,8580.0,8640.0}; 
//HOLDER_t[H+1]

// Initial 
const double T_ini    = 174.45; 
//HOLDER_T_ini
const double V_ini    =  0.30; 
//HOLDER_V_ini
const double E_ini    = 4800.00; 
//HOLDER_E_ini
const double t_ini    = 5700.00; 
//HOLDER_t_ini
int u                 = 95; 
//HOLDER_u
int taumin            = 5; 
//HOLDER_taumin



double paretoFunc()
{
	double alpha  = 0.5;
	return alpha*x[2] + (1-alpha)*fabs(Tg-x[0]);
}


void initialize()
{
    // Asumir cualquiera 0,0  modo -&gt; mode_ini
    double dt = 60.0;
    x[0] = T_ini;
    x[1] = V_ini;
    x[2] = E_ini;
    //double t = t_ini;
    return;
}

void update(int k)
{
    int p = modes[mode][0];  
    int r = modes[mode][1];    
    int v = my_valve;
    int f = modes[mode][3];  
    double dt = 60.0,E,V,T,t;
	int j;
    int h;
    for(j=0; j &lt; taumin; j=j+1) //each minute (60 seconds) evolve  //for(i=0;i&lt;step;i=i+1) i =0xx -&gt; i =?
    {       
        h = k*taumin+j;     
        E = x[2] + dt*r*2;
        V = x[1] + dt*rateVo*( 0.1*p - x[1] ); // 0.5 = rate            
        T = x[0] + dt*(1/(0.1*p))*( 
                        - factorTe*2.8811059759131854e-06*(x[0]-T_env[h]) 
                        - v*9.34673995175876e-05*(x[0]-T_in[h])
                        - f*0.001005026*(0.1*p-x[1])*(x[0]-T_in[h])
                        + factorI*8.403225763080125e-07*I[h]
                        + r*0.00048018432931886426 );
        x[2]=E;
        x[1]=V;
        x[0]=T;
		u=u+1;
    }
    return;
}

// Forescasting in (python  and send to UPPAAAL -&gt; I,T_env,T_in),  18*tau &lt;  Horizont , 18 modes, 6 patterns


/*
const double modes[8][4]=
{
{ 1.0,0.0,0.0,0.0 },
{ 1.0,1.0,0.0,0.0 },
{ 2.0,0.0,0.0,0.0 },
{ 2.0,1.0,0.0,0.0 },
{ 3.0,0.0,0.0,1.0 },
{ 3.0,1.0,0.0,1.0 },
{ 2.0,0.0,0.0,1.0 },
{ 2.0,1.0,0.0,1.0 }
};
*/
// zonotope_t = 128
const zonotope_t zonotopes[id_zonotope_t] = {
{40.0,40.4688,0.1,0.3},
{40.4688,40.9375,0.1,0.3},
{40.9375,41.4062,0.1,0.3},
{41.4062,41.875,0.1,0.3},
{41.875,42.3438,0.1,0.3},
{42.3438,42.8125,0.1,0.3},
{42.8125,43.2812,0.1,0.3},
{43.2812,43.75,0.1,0.3},
{43.75,44.2188,0.1,0.3},
{44.2188,44.6875,0.1,0.3},
{44.6875,45.1562,0.1,0.3},
{45.1562,45.625,0.1,0.3},
{45.625,46.0938,0.1,0.3},
{46.0938,46.5625,0.1,0.3},
{46.5625,47.0312,0.1,0.3},
{47.0312,47.5,0.1,0.3},
{47.5,47.9688,0.1,0.3},
{47.9688,48.4375,0.1,0.3},
{48.4375,48.9062,0.1,0.3},
{48.9062,49.375,0.1,0.3},
{49.375,49.8438,0.1,0.3},
{49.8438,50.3125,0.1,0.3},
{50.3125,50.7812,0.1,0.3},
{50.7812,51.25,0.1,0.3},
{51.25,51.7188,0.1,0.3},
{51.7188,52.1875,0.1,0.3},
{52.1875,52.6562,0.1,0.3},
{52.6562,53.125,0.1,0.3},
{53.125,53.5938,0.1,0.3},
{53.5938,54.0625,0.1,0.3},
{54.0625,54.5312,0.1,0.3},
{54.5312,55.0,0.1,0.3},
{55.0,55.4688,0.1,0.3},
{55.4688,55.9375,0.1,0.3},
{55.9375,56.4062,0.1,0.3},
{56.4062,56.875,0.1,0.3},
{56.875,57.3438,0.1,0.3},
{57.3438,57.8125,0.1,0.3},
{57.8125,58.2812,0.1,0.3},
{58.2812,58.75,0.1,0.3},
{58.75,59.2188,0.1,0.3},
{59.2188,59.6875,0.1,0.3},
{59.6875,60.1562,0.1,0.3},
{60.1562,60.625,0.1,0.3},
{60.625,61.0938,0.1,0.3},
{61.0938,61.5625,0.1,0.3},
{61.5625,62.0312,0.1,0.3},
{62.0312,62.5,0.1,0.3},
{62.5,62.9688,0.1,0.3},
{62.9688,63.4375,0.1,0.3},
{63.4375,63.9062,0.1,0.3},
{63.9062,64.375,0.1,0.3},
{64.375,64.8438,0.1,0.3},
{64.8438,65.3125,0.1,0.3},
{65.3125,65.7812,0.1,0.3},
{65.7812,66.25,0.1,0.3},
{66.25,66.7188,0.1,0.3},
{66.7188,67.1875,0.1,0.3},
{67.1875,67.6562,0.1,0.3},
{67.6562,68.125,0.1,0.3},
{68.125,68.5938,0.1,0.3},
{68.5938,69.0625,0.1,0.3},
{69.0625,69.5312,0.1,0.3},
{69.5312,70.0,0.1,0.3}
};



const int allPatterns[id_list_patterns_t][id_pattern_t][pattern_len_t] = {
{{3,-1,-1}, {3,7,-1}, {0,7,-1}, {1,4,-1}, {2,1,-1}, {2,1,5}, {3,4,1}, {3,5,2}, {3,6,1}, {0,1,4}, {0,4,1}, {0,5,3}, {0,6,1}, {2,0,1}, {-2,-2,-2}},
{{3,-1,-1}, {3,7,-1}, {0,7,-1}, {1,4,-1}, {2,1,-1}, {2,1,5}, {3,4,1}, {3,5,2}, {3,6,1}, {0,1,4}, {0,4,1}, {0,5,3}, {0,6,1}, {2,0,1}, {-2,-2,-2}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,1,-1}, {2,1,5}, {3,4,1}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,1}, {2,0,7}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,1,-1}, {2,1,5}, {3,4,1}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,1}, {1,0,4}, {2,0,7}, {-2,-2,-2}, {-2,-2,-2}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,3,-1}, {2,3,5}, {3,4,3}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,1}, {1,0,4}, {2,0,7}, {2,1,4}, {2,2,3}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,3,-1}, {2,3,5}, {3,4,3}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,3}, {1,0,4}, {2,0,7}, {2,1,4}, {2,2,3}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,3,-1}, {2,3,5}, {3,4,3}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,3}, {1,0,4}, {2,0,7}, {2,1,4}, {2,2,3}},
{{3,-1,-1}, {3,7,-1}, {0,5,-1}, {1,4,-1}, {2,3,-1}, {2,3,5}, {3,4,3}, {3,5,2}, {3,6,3}, {0,1,4}, {0,4,3}, {1,0,4}, {2,0,7}, {2,1,4}, {2,2,3}},
{{2,-1,-1}, {2,3,-1}, {2,3,7}, {0,5,-1}, {1,4,-1}, {0,1,4}, {0,4,3}, {1,0,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,7}, {0,5,-1}, {1,4,-1}, {0,1,4}, {0,4,3}, {1,0,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,7}, {0,5,-1}, {1,4,-1}, {0,4,3}, {1,0,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,4,3}, {1,6,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,4,3}, {1,6,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,7}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,5}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,5}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,5,-1}, {0,0,5}, {0,4,3}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,4,-1}, {0,4,5}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,4,-1}, {0,4,5}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,3,-1}, {2,3,6}, {0,4,-1}, {0,4,5}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,3,4}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,3,4}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {2,5,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {0,0,5}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {0,4,5}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {2,6,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {0,4,-1}, {2,4,0}, {2,6,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {0,4,-1}, {2,4,0}, {2,6,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {0,4,-1}, {2,4,0}, {2,6,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {0,4,-1}, {2,4,0}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{2,-1,-1}, {0,4,-1}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}},
{{0,4,-1}, {2,4,-1}, {2,0,4}, {2,2,4}, {4,0,4}, {4,2,4}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}, {-2,-2,-2}}
};







</declaration>
	<template>
		<name x="5" y="5">Template</name>
		<declaration>int it = 0;
/*
predict

*/
bool validPatternId(id_pattern_t p,id_list_patterns_t  ind_patterns)
{
    if (allPatterns[ind_patterns][p][1] == -2) 
        return false;
    else   
        return true;
}

int getAvailable(id_list_patterns_t ind_patterns,id_pattern_t p_id)
{
    int av=0;
    for (i:pattern_len_t)
    {
        if (allPatterns[ind_patterns][p_id][i] &gt;= 0)
            av = av + 1;
    }
    return av;
}

void applyMode(id_list_patterns_t ind_patterns, id_pattern_t p_id, int ppos)  // int?
{   
    mode = allPatterns[ind_patterns][p_id][ppos]; 
}

bool includes(const zonotope_t&amp; a, double &amp;x[3])
{
  return (a[0]&lt;=x[0] &amp;&amp; x[0] &lt;= a[1] &amp;&amp; a[2]&lt;=x[1] &amp;&amp; x[1] &lt;= a[3]);
}


id_zonotope_t getZonotope()
{
    //for(i: int[0,127])            
    for(i: id_zonotope_t )
    {
        if (includes(zonotopes[i], x))
        { // this
            //out = allPatterns[i][0];
            return i;
        }
    }
    return 0; 
}</declaration>
		<location id="id0" x="-399" y="-1547">
			<label kind="exponentialrate" x="-425" y="-1547">1</label>
		</location>
		<location id="id1" x="-400" y="-1437">
			<label kind="exponentialrate" x="-425" y="-1428">1</label>
		</location>
		<location id="id2" x="-68" y="-1437">
			<label kind="exponentialrate" x="-93" y="-1428">1</label>
		</location>
		<location id="id3" x="-400" y="-1292">
			<label kind="exponentialrate" x="-425" y="-1283">1</label>
		</location>
		<location id="id4" x="-68" y="-1292">
			<label kind="exponentialrate" x="-85" y="-1283">1</label>
		</location>
		<location id="id5" x="-400" y="-1054">
			<label kind="invariant" x="-383" y="-1062">xc &lt;= step</label>
			<label kind="exponentialrate" x="-425" y="-1045">1</label>
		</location>
		<location id="id6" x="-400" y="-952">
			<label kind="exponentialrate" x="-425" y="-943">1</label>
			<urgent/>
		</location>
		<location id="id7" x="-400" y="-833">
			<name x="-417" y="-808">DONE</name>
			<label kind="exponentialrate" x="-425" y="-833">1</label>
		</location>
		<location id="id8" x="-9" y="-927">
			<name x="-43" y="-876">__RESET__</name>
		</location>
		<location id="id9" x="-451" y="-1139">
			<label kind="exponentialrate" x="-467" y="-1130">1</label>
		</location>
		<location id="id10" x="-349" y="-1139">
			<label kind="exponentialrate" x="-340" y="-1130">1</label>
		</location>
		<branchpoint id="id11" x="-400" y="-1173">
		</branchpoint>
		<init ref="id0"/>
		<transition controllable="false">
			<source ref="id10"/>
			<target ref="id5"/>
			<label kind="assignment" x="-374" y="-1096">my_valve = 1</label>
		</transition>
		<transition controllable="false">
			<source ref="id9"/>
			<target ref="id5"/>
			<label kind="assignment" x="-519" y="-1097">my_valve = 0</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id10"/>
			<label kind="probability" x="-374" y="-1182">1</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="probability" x="-434" y="-1182">5</label>
		</transition>
		<transition controllable="false">
			<source ref="id3"/>
			<target ref="id11"/>
			<label kind="assignment" x="-391" y="-1224">applyMode(ind_l_patterns,p_id,ppos),
ppos=ppos+1</label>
		</transition>
		<transition controllable="false">
			<source ref="id8"/>
			<target ref="id8"/>
			<nail x="-60" y="-1029"/>
			<nail x="59" y="-1029"/>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="-391" y="-910">yc &gt;  horizon</label>
		</transition>
		<transition controllable="false">
			<source ref="id6"/>
			<target ref="id1"/>
			<label kind="guard" x="-595" y="-1207">yc &lt;= horizon</label>
			<label kind="assignment" x="-570" y="-1173">it++</label>
			<nail x="-527" y="-952"/>
			<nail x="-527" y="-1437"/>
		</transition>
		<transition controllable="false">
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="guard" x="-391" y="-1029">xc == step</label>
			<label kind="assignment" x="-391" y="-1012">xc = 0,
update(it),
pareto = paretoFunc()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="select" x="-247" y="-1335">p : id_pattern_t</label>
			<label kind="guard" x="-298" y="-1318">validPatternId(p,ind_l_patterns)</label>
			<label kind="assignment" x="-238" y="-1292">p_id = p,
ppos = 0,
availableInPattern = getAvailable(ind_l_patterns,p),
visitedPatterns++</label>
		</transition>
		<transition controllable="false">
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="assignment" x="-162" y="-1386">ind_l_patterns = getZonotope()</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-485" y="-1369">(ppos+1) &lt;= availableInPattern</label>
		</transition>
		<transition controllable="false">
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-323" y="-1462">(ppos+1)&gt; availableInPattern</label>
		</transition>
		<transition controllable="false">
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="assignment" x="-391" y="-1504">initialize(),
it = 0</label>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Template();
// List one or more processes to be composed into a system.
system Process;
                    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { ppos,visitedPatterns }</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=horizon] { ppos,visitedPatterns } under Opt</formula>
			<comment></comment>
		</query>
		<query>
			<formula>simulate 1 [&lt;=100] { ppos }</formula>
			<comment></comment>
		</query>
		<query>
			<formula>strategy Opt = minE (pareto) [&lt;=horizon]: &lt;&gt; GTime&gt;=horizon</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
